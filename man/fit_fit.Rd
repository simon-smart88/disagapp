% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_fit_f.R
\name{fit_fit}
\alias{fit_fit}
\title{Fit a disaggregation model}
\usage{
fit_fit(data, priors, family, link, iterations, field, iid, async = FALSE)
}
\arguments{
\item{data}{disag_data.  Object returned by prepare_data function that
contains all the necessary objects for the model fitting}

\item{priors}{list. List of prior values}

\item{family}{character. Model family to fit}

\item{link}{character. Link function to use}

\item{iterations}{numeric. Number of iterations}

\item{field}{logical. Whether to include a spatial field}

\item{iid}{logical. Whether to include an iid effect}

\item{async}{logical. Whether or not the function is being used asynchronously}
}
\value{
a list of class \code{disag_model} or a character string if an error occurs
}
\description{
This function is called by the fit_fit module and calls
disaggregation::disag_model() with the only difference being that covariates
are wrapped to enable asynchronous operation and any errors are returned as
a character
}
\examples{
\dontrun{
polygons <- list()
n_polygon_per_side <- 10
n_polygons <- n_polygon_per_side * n_polygon_per_side
n_pixels_per_side <- n_polygon_per_side * 2

for(i in 1:n_polygons) {
  row <- ceiling(i/n_polygon_per_side)
  col <- ifelse(i \%\% n_polygon_per_side != 0, i \%\% n_polygon_per_side, n_polygon_per_side)
  xmin = 2*(col - 1); xmax = 2*col; ymin = 2*(row - 1); ymax = 2*row
  polygons[[i]] <- list(cbind(c(xmin, xmax, xmax, xmin, xmin),
                              c(ymax, ymax, ymin, ymin, ymax)))
}

polys <- lapply(polygons,sf::st_polygon)
N <- floor(runif(n_polygons, min = 1, max = 100))
response_df <- data.frame(area_id = 1:n_polygons, response = runif(n_polygons, min = 0, max = 1000))

spdf <- sf::st_sf(response_df, geometry = polys)

# Create raster stack
r <- terra::rast(ncol=n_pixels_per_side, nrow=n_pixels_per_side)
terra::ext(r) <- terra::ext(spdf)
r[] <- sapply(1:terra::ncell(r), function(x){
rnorm(1, ifelse(x \%\% n_pixels_per_side != 0, x \%\% n_pixels_per_side, n_pixels_per_side), 3)})
r2 <- terra::rast(ncol=n_pixels_per_side, nrow=n_pixels_per_side)
terra::ext(r2) <- terra::ext(spdf)
r2[] <- sapply(1:terra::ncell(r), function(x) rnorm(1, ceiling(x/n_pixels_per_side), 3))
cov_stack <- c(r, r2)
names(cov_stack) <- c('layer1', 'layer2')

test_data <- disaggregation::prepare_data(polygon_shapefile = spdf,
                          covariate_rasters = cov_stack)

result <- fit_fit(test_data,
                  priors = NULL,
                  family = "gaussian"
                  link = "identity"
                  iterations = 2
                  field = TRUE,
                  iid = FALSE)
 }

}
\author{
Simon Smart \href{mailto:simon.smart@cantab.net}{simon.smart@cantab.net}
}
